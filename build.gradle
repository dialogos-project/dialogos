plugins {
  id 'application'
  id 'java'
  id 'com.github.hierynomus.license' version '0.16.1'
}

apply plugin: 'maven-publish' // to provide "gradlew publishToMavenLocal"

allprojects {
  version = '2.1.4'  // DO NOT EDIT - THIS IS CHANGED BY THE RELEASE SCRIPT
  group = 'com.github.dialogos-project'

  repositories {
    mavenCentral()
    maven { url "https://jitpack.io/" }
    maven {
            name 'DFKI-MLT'
            url 'https://raw.githubusercontent.com/DFKI-MLT/Maven-Repository/main'
    }
  }

  apply plugin: 'java'
  java {
    sourceCompatibility = JavaVersion.VERSION_1_8
  }

  apply plugin: 'license'
  licenseMain.onlyIf { project.file('LICENSE ').exists() }
  licenseTest.onlyIf { project.file('LICENSE ').exists() }

  dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
  }
}

dependencies {
  implementation subprojects
}

application {
  mainClassName = 'com.clt.dialogos.DialogOS'
}

run {
  systemProperties System.getProperties()
  jvmArgs '-Dfile.encoding=UTF8'
}

def version = '2.1.4' // DO NOT EDIT - THIS IS CHANGED BY THE RELEASE SCRIPT
def group = "com.github.dialogos-project"


// configuration for maven-publish plugin
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.github.dialogos-project'
            artifactId = 'dialogos'
            from components.java

//	    artifact javadocJar
        }
    }
}

subprojects{
    publishing {
        publications {
            "$project.name"(MavenPublication) {
                groupId = 'com.github.dialogos-project'
                artifactId = project.name
                from components.java
            }
        }
    }
}

// generate Javadoc for all subprojects and collect them together
task allJavadoc(type: Javadoc) {
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}

// package Javadoc into one Jar file in build/libs
task javadocJar(type: Jar, dependsOn: allJavadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

task clean_all {
    subprojects.each {
        it.afterEvaluate {
            def cleanTask = it.tasks.findByName('clean')
            if (cleanTask) {
                dependsOn(cleanTask)
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

// NB This is to declare artifacts for Gradle. To make the artifacts
// appear on Jitpack, they also need to be declared in "publishing" above.
artifacts {
    archives javadocJar
}



/****************************************
 * Collect all submodules and external dependencies into a single build/libs/dialogos-with-dependencies-<VERSION>.jar
 * https://discuss.gradle.org/t/how-to-get-gradle-install-to-actually-bundle-all-project-subproject-classes-resources-etc/12070/4
 ****************************************/

// This should not interfere with the distribution process, but let's
// keep an eye on it. - AK



configurations {
    childJars
}

dependencies {
    subprojects.each {
        childJars project(it.path)
    }
}

task shadowJar(type:Jar) {
    manifest {
        attributes 'Implementation-Title': 'DialogOS',
        'Implementation-Version': version,
	'Main-Class': mainClassName
    }

    archiveBaseName = 'dialogos-with-dependencies'

    dependsOn configurations.childJars
    from { configurations.childJars.collect { zipTree(it) } }
}
